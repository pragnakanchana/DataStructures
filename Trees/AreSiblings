#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    struct Node *left, *right;
};

Node* newNode(int x){
    Node* temp = new Node;
    temp->data = x;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}
Node* insert(Node* root, int x){
    if(root == NULL)
        return newNode(x);
    else if(root->data > x)
        root->left =  insert(root->left,x);
    else
        root->right =  insert(root->right,x);
    return root;
}
void BFS(Node* root){
    queue<Node*> q;
    q.push(root);
    q.push(NULL);
    while(q.size() > 1){
        Node* x = q.front();
        q.pop();
        if(x == NULL){
            q.push(NULL);
            cout << endl;
        }
        else{
            cout << x->data << " ";
            if(x->left != NULL) q.push(x->left);
            if(x->right != NULL) q.push(x->right);
        }
    }
    
}

bool areSiblings(Node* root, Node* x, Node* y){
    if(root == NULL){
        return false;
    }
    if((root->left == x && root->right == y) || (root->left == y && root->right == x)){
        return true;
    }
    return areSiblings(root->left,x,y)|| areSiblings(root->right,x,y);
}


int main() {  
   
    /* 
            3
        1       5 
    0       2,4     6
    
    */
        
		Node* root = newNode(1);
		Node* x1 = newNode(2);
		Node* y1 = newNode(3);
		root->left = x1;
		root->right = y1;
		root->left->left = newNode(4);
		root->right->left = newNode(6);
		Node* x2 = newNode(7);
		Node* y2 = newNode(9);
		root->right->left->left = newNode(8);
		root->right->left->right = y2;
		root->left->left->left = x2;
        
        cout << areSiblings(root, x1,y1) << endl;
        cout << areSiblings(root,x2,y2);
        cout << endl;
        
    return 0;
}
