#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    struct Node *left, *right;
};

Node* newNode(int x){
    Node* temp = new Node;
    temp->data = x;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}
Node* insert(Node* root, int x){
    if(root == NULL)
        return newNode(x);
    else if(root->data > x)
        root->left =  insert(root->left,x);
    else
        root->right =  insert(root->right,x);
    return root;
}
void BFS(Node* root){
    queue<Node*> q;
    q.push(root);
    q.push(NULL);
    while(q.size() > 1){
        Node* x = q.front();
        q.pop();
        if(x == NULL){
            q.push(NULL);
            cout << endl;
        }
        else{
            cout << x->data << " ";
            if(x->left != NULL) q.push(x->left);
            if(x->right != NULL) q.push(x->right);
        }
    }
    
}
map<int,int> bt;
void bottomView(Node* root, int l){
    if(root == NULL) return ;
    bt[l] = root->data;
    bottomView(root->left, l-1);
    bottomView(root->right, l+1);
}

map<int,int> tv;
void topView(Node* root, int l){
    if(root == NULL) return ;
    if(tv.find(l) == tv.end()) tv[l] = root->data;
    topView(root->left, l-1);
    topView(root->right, l+1);
}
int main() {  
   
    /* 
            3
        1       5 
    0       2,4     6
    
    */
        int a[7] = {3,1,2,0,5,4,6};
        Node* root = NULL;
        for(int i = 0 ; i < 7 ; i++){
            root = insert(root, a[i]);
        }
        
        BFS(root);
        cout << endl << "bottomView" << endl;
        bottomView(root,0);
        for(auto i : bt){
            cout << i.second << " ";
        }
        cout << endl << "topView" << endl;
        topView(root,0);
        for(auto i : tv){
            cout << i.second << " ";
        }
    return 0;
}
