#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include<bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    struct Node *left,*right;
};
Node* newNode(int x){
    Node* nn = new Node;
    nn->data = x;
    nn->left = nn->right = NULL;
    return nn;
}
void inorder(Node* root){
    if(root == NULL) return ;
    inorder(root->left);
    cout << root -> data << " ";
    inorder(root->right);
}
Node* insertLevelOrder(int arr[], Node* root,
                       int i, int n)
{
    if (i < n)
    {
        Node* temp = newNode(arr[i]);
        root = temp;
        root->left = insertLevelOrder(arr,
                   root->left, 2 * i + 1, n);
        root->right = insertLevelOrder(arr,
                  root->right, 2 * i + 2, n);
    }
    return root;
}
bool isBST(Node* root, int min, int max){
    if(root == NULL){
        return true;
    }
    if(root -> data <= max && root->data >= min && isBST(root->left, min, root->data) && isBST(root->right, root->data, max)){
        return true;
    }
    
    return false;
    
    
}
int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int t;
    cin >> t;
    while(t--){
        int n;
        cin >> n;
        Node* root = NULL;
        int a[n];
        for(int i = 0 ; i < n  ; i++){
            cin >> a[i] ;
        }
        root = insertLevelOrder(a,root,0,n);
        isBST(root,INT_MIN,INT_MAX) ? cout << "True" : cout << "False";
        cout << endl;
    }
    return 0;
}
